
type Paired @aws_iam @aws_api_key {
  id: ID!
  partner_request: String
  partner_accept: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type UserProfile @aws_iam @aws_api_key {
  id: ID!
  profile_image: AWSURL
  bio: String
  UserEntries(filter: ModelUserEntryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserEntryConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type User @aws_iam @aws_api_key {
  id: ID!
  name: String!
  email: AWSEmail!
  password: String!
  Profile: UserProfile
  Paired: Paired
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  userProfileId: ID
  userPairedId: ID
}

type UserEntry @aws_iam @aws_api_key {
  id: ID!
  title: String
  content: String
  date_created: AWSDateTime
  isPrivate: Boolean
  image: AWSURL
  userprofileID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPairedConnection @aws_api_key @aws_iam {
  items: [Paired]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPairedFilterInput {
  id: ModelIDInput
  partner_request: ModelStringInput
  partner_accept: ModelStringInput
  and: [ModelPairedFilterInput]
  or: [ModelPairedFilterInput]
  not: ModelPairedFilterInput
}

type Query {
  getPaired(id: ID!): Paired @aws_api_key @aws_iam
  listPaireds(filter: ModelPairedFilterInput, limit: Int, nextToken: String): ModelPairedConnection @aws_api_key @aws_iam
  syncPaireds(filter: ModelPairedFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPairedConnection @aws_api_key @aws_iam
  getUserProfile(id: ID!): UserProfile @aws_api_key @aws_iam
  listUserProfiles(filter: ModelUserProfileFilterInput, limit: Int, nextToken: String): ModelUserProfileConnection @aws_api_key @aws_iam
  syncUserProfiles(filter: ModelUserProfileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserProfileConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
  getUserEntry(id: ID!): UserEntry @aws_api_key @aws_iam
  listUserEntries(filter: ModelUserEntryFilterInput, limit: Int, nextToken: String): ModelUserEntryConnection @aws_api_key @aws_iam
  syncUserEntries(filter: ModelUserEntryFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserEntryConnection @aws_api_key @aws_iam
}

input ModelPairedConditionInput {
  partner_request: ModelStringInput
  partner_accept: ModelStringInput
  and: [ModelPairedConditionInput]
  or: [ModelPairedConditionInput]
  not: ModelPairedConditionInput
}

input CreatePairedInput {
  id: ID
  partner_request: String
  partner_accept: String
  _version: Int
}

input UpdatePairedInput {
  id: ID!
  partner_request: String
  partner_accept: String
  _version: Int
}

input DeletePairedInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPaired(input: CreatePairedInput!, condition: ModelPairedConditionInput): Paired @aws_api_key @aws_iam
  updatePaired(input: UpdatePairedInput!, condition: ModelPairedConditionInput): Paired @aws_api_key @aws_iam
  deletePaired(input: DeletePairedInput!, condition: ModelPairedConditionInput): Paired @aws_api_key @aws_iam
  createUserProfile(input: CreateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
  updateUserProfile(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
  deleteUserProfile(input: DeleteUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createUserEntry(input: CreateUserEntryInput!, condition: ModelUserEntryConditionInput): UserEntry @aws_api_key @aws_iam
  updateUserEntry(input: UpdateUserEntryInput!, condition: ModelUserEntryConditionInput): UserEntry @aws_api_key @aws_iam
  deleteUserEntry(input: DeleteUserEntryInput!, condition: ModelUserEntryConditionInput): UserEntry @aws_api_key @aws_iam
}

type Subscription {
  onCreatePaired: Paired @aws_subscribe(mutations: ["createPaired"]) @aws_api_key @aws_iam
  onUpdatePaired: Paired @aws_subscribe(mutations: ["updatePaired"]) @aws_api_key @aws_iam
  onDeletePaired: Paired @aws_subscribe(mutations: ["deletePaired"]) @aws_api_key @aws_iam
  onCreateUserProfile: UserProfile @aws_subscribe(mutations: ["createUserProfile"]) @aws_api_key @aws_iam
  onUpdateUserProfile: UserProfile @aws_subscribe(mutations: ["updateUserProfile"]) @aws_api_key @aws_iam
  onDeleteUserProfile: UserProfile @aws_subscribe(mutations: ["deleteUserProfile"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateUserEntry: UserEntry @aws_subscribe(mutations: ["createUserEntry"]) @aws_api_key @aws_iam
  onUpdateUserEntry: UserEntry @aws_subscribe(mutations: ["updateUserEntry"]) @aws_api_key @aws_iam
  onDeleteUserEntry: UserEntry @aws_subscribe(mutations: ["deleteUserEntry"]) @aws_api_key @aws_iam
}

type ModelUserProfileConnection @aws_api_key @aws_iam {
  items: [UserProfile]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserProfileFilterInput {
  id: ModelIDInput
  profile_image: ModelStringInput
  bio: ModelStringInput
  and: [ModelUserProfileFilterInput]
  or: [ModelUserProfileFilterInput]
  not: ModelUserProfileFilterInput
}

input ModelUserProfileConditionInput {
  profile_image: ModelStringInput
  bio: ModelStringInput
  and: [ModelUserProfileConditionInput]
  or: [ModelUserProfileConditionInput]
  not: ModelUserProfileConditionInput
}

input CreateUserProfileInput {
  id: ID
  profile_image: AWSURL
  bio: String
  _version: Int
}

input UpdateUserProfileInput {
  id: ID!
  profile_image: AWSURL
  bio: String
  _version: Int
}

input DeleteUserProfileInput {
  id: ID!
  _version: Int
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  userProfileId: ModelIDInput
  userPairedId: ModelIDInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  userProfileId: ModelIDInput
  userPairedId: ModelIDInput
}

input CreateUserInput {
  id: ID
  name: String!
  email: AWSEmail!
  password: String!
  _version: Int
  userProfileId: ID
  userPairedId: ID
}

input UpdateUserInput {
  id: ID!
  name: String
  email: AWSEmail
  password: String
  _version: Int
  userProfileId: ID
  userPairedId: ID
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type ModelUserEntryConnection @aws_iam @aws_api_key {
  items: [UserEntry]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserEntryFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  date_created: ModelStringInput
  isPrivate: ModelBooleanInput
  image: ModelStringInput
  userprofileID: ModelIDInput
  and: [ModelUserEntryFilterInput]
  or: [ModelUserEntryFilterInput]
  not: ModelUserEntryFilterInput
}

input ModelUserEntryConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  date_created: ModelStringInput
  isPrivate: ModelBooleanInput
  image: ModelStringInput
  userprofileID: ModelIDInput
  and: [ModelUserEntryConditionInput]
  or: [ModelUserEntryConditionInput]
  not: ModelUserEntryConditionInput
}

input CreateUserEntryInput {
  id: ID
  title: String
  content: String
  date_created: AWSDateTime
  isPrivate: Boolean
  image: AWSURL
  userprofileID: ID!
  _version: Int
}

input UpdateUserEntryInput {
  id: ID!
  title: String
  content: String
  date_created: AWSDateTime
  isPrivate: Boolean
  image: AWSURL
  userprofileID: ID
  _version: Int
}

input DeleteUserEntryInput {
  id: ID!
  _version: Int
}

